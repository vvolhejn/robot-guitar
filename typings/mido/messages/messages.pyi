"""
This type stub file was generated by pyright.
"""

class BaseMessage:
    """Abstract base class for messages."""
    is_meta = ...
    def copy(self):
        ...
    
    def bytes(self):
        ...
    
    def bin(self): # -> bytearray:
        """Encode message and return as a bytearray.

        This can be used to write the message to a file.
        """
        ...
    
    def hex(self, sep=...): # -> str:
        """Encode message and return as a string of hex numbers,

        Each number is separated by the string sep.
        """
        ...
    
    def dict(self): # -> dict[str, Any]:
        """Returns a dictionary containing the attributes of the message.

        Example: {'type': 'sysex', 'data': [1, 2], 'time': 0}

        Sysex data will be returned as a list.
        """
        ...
    
    @classmethod
    def from_dict(cls, data): # -> Self:
        """Create a message from a dictionary.

        Only "type" is required. The other will be set to default
        values.
        """
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @property
    def is_realtime(self): # -> bool:
        """True if the message is a system realtime message."""
        ...
    
    def is_cc(self, control=...): # -> bool:
        """Return True if the message is of type 'control_change'.

        The optional control argument can be used to test for a specific
        control number, for example:

        if msg.is_cc(7):
            # Message is control change 7 (channel volume).
        """
        ...
    
    def __delattr__(self, name):
        ...
    
    def __setattr__(self, name, value):
        ...
    
    def __eq__(self, other) -> bool:
        ...
    


class SysexData(tuple):
    """Special kind of tuple accepts and converts any sequence in +=."""
    def __iadd__(self, other): # -> tuple[Any, ...]:
        ...
    


class Message(BaseMessage):
    def __init__(self, type, skip_checks=..., **args) -> None:
        ...
    
    def copy(self, skip_checks=..., **overrides): # -> Self:
        """Return a copy of the message.

        Attributes will be overridden by the passed keyword arguments.
        Only message specific attributes can be overridden. The message
        type can not be changed.

        The skip_checks arg can be used to bypass validation of message
        attributes and should be used cautiously.
        """
        ...
    
    @classmethod
    def from_bytes(cl, data, time=...): # -> Self:
        """Parse a byte encoded message.

        Accepts a byte string or any iterable of integers.

        This is the reverse of msg.bytes() or msg.bin().
        """
        ...
    
    @classmethod
    def from_hex(cl, text, time=..., sep=...): # -> Self:
        """Parse a hex encoded message.

        This is the reverse of msg.hex().
        """
        ...
    
    @classmethod
    def from_str(cl, text): # -> Self:
        """Parse a string encoded message.

        This is the reverse of str(msg).
        """
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __str__(self) -> str:
        ...
    
    __setattr__ = ...
    def bytes(self): # -> list[int | Any] | list[Any]:
        """Encode message and return as a list of integers."""
        ...
    


def parse_string(text): # -> Message:
    """Parse a string of text and return a message.

    The string can span multiple lines, but must contain
    one full message.

    Raises ValueError if the string could not be parsed.
    """
    ...

def parse_string_stream(stream): # -> Generator[tuple[Message, None] | tuple[None, str], Any, None]:
    """Parse a stream of messages and yield (message, error_message)

    stream can be any iterable that generates text strings, where each
    string is a string encoded message.

    If a string can be parsed, (message, None) is returned. If it
    can't be parsed, (None, error_message) is returned. The error
    message contains the line number where the error occurred.
    """
    ...

def format_as_string(msg, include_time=...): # -> str:
    """Format a message and return as a string.

    This is equivalent to str(message).

    To leave out the time attribute, pass include_time=False.
    """
    ...

