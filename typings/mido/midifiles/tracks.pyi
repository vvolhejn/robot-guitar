"""
This type stub file was generated by pyright.
"""

class MidiTrack(list):
    @property
    def name(self): # -> Literal['']:
        """Name of the track.

        This will return the name from the first track_name meta
        message in the track, or '' if there is no such message.

        Setting this property will update the name field of the first
        track_name message in the track. If no such message is found,
        one will be added to the beginning of the track with a delta
        time of 0."""
        ...
    
    @name.setter
    def name(self, name): # -> None:
        ...
    
    def copy(self): # -> Self:
        ...
    
    def __getitem__(self, index_or_slice): # -> Self:
        ...
    
    def __add__(self, other): # -> Self:
        ...
    
    def __mul__(self, other): # -> Self:
        ...
    
    def __repr__(self): # -> str:
        ...
    


def fix_end_of_track(messages, skip_checks=...): # -> Generator[Any | MetaMessage, Any, None]:
    """Remove all end_of_track messages and add one at the end.

    This is used by merge_tracks() and MidiFile.save()."""
    ...

def merge_tracks(tracks, skip_checks=...): # -> MidiTrack:
    """Returns a MidiTrack object with all messages from all tracks.

    The messages are returned in playback order with delta times
    as if they were all in one track.

    Pass skip_checks=True to skip validation of messages before merging.
    This should ONLY be used when the messages in tracks have already
    been validated by mido.checks.
    """
    ...

