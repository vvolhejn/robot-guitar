"""
This type stub file was generated by pyright.
"""

DEFAULT_BACKEND = ...
class Backend:
    """
    Wrapper for backend module.

    A backend module implements classes for input and output ports for
    a specific MIDI library. The Backend object wraps around the
    object and provides convenient 'open_*()' and 'get_*_names()'
    functions.
    """
    def __init__(self, name=..., api=..., load=..., use_environ=...) -> None:
        ...
    
    @property
    def module(self): # -> ModuleType | None:
        """A reference module implementing the backend.

        This will always be a valid reference to a module. Accessing
        this property will load the module. Use .loaded to check if
        the module is loaded.
        """
        ...
    
    @property
    def loaded(self): # -> bool:
        """Return True if the module is loaded."""
        ...
    
    def load(self): # -> None:
        """Load the module.

        Does nothing if the module is already loaded.

        This function will be called if you access the 'module'
        property."""
        ...
    
    def open_input(self, name=..., virtual=..., callback=..., **kwargs): # -> Any:
        """Open an input port.

        If the environment variable MIDO_DEFAULT_INPUT is set,
        it will override the default port.

        virtual=False
          Passing True opens a new port that other applications can
          connect to. Raises IOError if not supported by the backend.

        callback=None
          A callback function to be called when a new message arrives.
          The function should take one argument (the message).
          Raises IOError if not supported by the backend.
        """
        ...
    
    def open_output(self, name=..., virtual=..., autoreset=..., **kwargs): # -> Any:
        """Open an output port.

        If the environment variable MIDO_DEFAULT_OUTPUT is set,
        it will override the default port.

        virtual=False
          Passing True opens a new port that other applications can
          connect to. Raises IOError if not supported by the backend.

        autoreset=False
          Automatically send all_notes_off and reset_all_controllers
          on all channels. This is the same as calling `port.reset()`.
        """
        ...
    
    def open_ioport(self, name=..., virtual=..., callback=..., autoreset=..., **kwargs): # -> Any | IOPort:
        """Open a port for input and output.

        If the environment variable MIDO_DEFAULT_IOPORT is set,
        it will override the default port.

        virtual=False
          Passing True opens a new port that other applications can
          connect to. Raises IOError if not supported by the backend.

        callback=None
          A callback function to be called when a new message arrives.
          The function should take one argument (the message).
          Raises IOError if not supported by the backend.

        autoreset=False
          Automatically send all_notes_off and reset_all_controllers
          on all channels. This is the same as calling `port.reset()`.
        """
        ...
    
    def get_input_names(self, **kwargs): # -> list[Any]:
        """Return a list of all input port names."""
        ...
    
    def get_output_names(self, **kwargs): # -> list[Any]:
        """Return a list of all output port names."""
        ...
    
    def get_ioport_names(self, **kwargs): # -> list[Any]:
        """Return a list of all I/O port names."""
        ...
    
    def __repr__(self): # -> str:
        ...
    


