"""
This type stub file was generated by pyright.
"""

_noop = ...
def validate_slice(obj): # -> None:
    ...

class Patch:
    """
    Patch a callback output value

    Act like a proxy of the output prop value on the frontend.

    Supported prop types: Dictionaries and lists.
    """
    def __init__(self, location=..., parent=...) -> None:
        ...
    
    def __getstate__(self): # -> dict[str, Any]:
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    
    def __getitem__(self, item): # -> Patch:
        ...
    
    def __getattr__(self, item): # -> list[Any] | Patch:
        ...
    
    def __setattr__(self, key, value): # -> None:
        ...
    
    def __delattr__(self, item): # -> None:
        ...
    
    def __setitem__(self, key, value): # -> None:
        ...
    
    def __delitem__(self, key): # -> None:
        ...
    
    def __iadd__(self, other): # -> object:
        ...
    
    def __isub__(self, other): # -> object:
        ...
    
    def __imul__(self, other): # -> object:
        ...
    
    def __itruediv__(self, other): # -> object:
        ...
    
    def __ior__(self, other): # -> object:
        ...
    
    def __iter__(self):
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def append(self, item): # -> None:
        """Add the item to the end of a list"""
        ...
    
    def prepend(self, item): # -> None:
        """Add the item to the start of a list"""
        ...
    
    def insert(self, index, item): # -> None:
        """Add the item at the index of a list"""
        ...
    
    def clear(self): # -> None:
        """Remove all items in a list"""
        ...
    
    def reverse(self): # -> None:
        """Reversal of the order of items in a list"""
        ...
    
    def extend(self, item): # -> None:
        """Add all the items to the end of a list"""
        ...
    
    def remove(self, item): # -> None:
        """filter the item out of a list on the frontend"""
        ...
    
    def update(self, E=..., **F): # -> None:
        """Merge a dict or keyword arguments with another dictionary"""
        ...
    
    def sort(self):
        ...
    
    def to_plotly_json(self): # -> dict[str, str | Any | list[Any]]:
        ...
    


